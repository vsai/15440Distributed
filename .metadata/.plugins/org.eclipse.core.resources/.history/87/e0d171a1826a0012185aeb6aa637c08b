package processManaging;

import java.lang.reflect.Constructor;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;

import processMigration.MigratableProcess;
import processMigration.MigratableProcesses;

import java.net.Socket;

public class ProcessManager {

	/**
	 * @param args
	 */
	private boolean isSlave;
	private String ipAddress;
	private String hostname;
	HashMap<MigratableProcess, String[]> processes;
	
	public ProcessManager (){
			this.isSlave = false;
			processes = new HashMap<MigratableProcess, String[]>();
	}

	//Master = start the new processes
	//Slave = does not start new processes
	//Master = accepts ps, quit, allows to start new processes
	//Slave = accepts ps, quit
	
	public static void main(String[] args) {
		if (args.length == 0) {
			//run process manager as master
			System.out.println("I'm a MASTER");
			//isSlave = false;
			
		} else if (args.length == 2 && args[0].equals("-c")) {
			String hostname = args[1];
			System.out.println("I'm a SLAVE. Master is :" + hostname);
			//isSlave = true;
		} else {
			System.out.println("Invalid input to startup ProcessManager");
			System.exit(0);
		}
		
		processes = new HashMap<MigratableProcess, String[]>();
		Scanner sc = new Scanner(System.in);
		
		while(true){
			System.out.println("Prompt for input ==>");
			String input = sc.nextLine();
			
			if (input.equals("ps")) {
				for (MigratableProcess p : processes.keySet()){
					System.out.print(p.getClass().getName());
					String[] pArgs = processes.get(p);
					for (String arg : pArgs){
						System.out.print(arg);
					}
					System.out.println();
				}
			} else if (input.equals("quit")){
				System.exit(0);
			} else if (isSlave == false){//Process input with commands - only for master
				String in[] = input.split(" ", 2);
				String processArgs[] = in[1].split(" ");
				try {
					Class<?> myClass = Class.forName(in[0]);
					Constructor myCtor = myClass.getConstructor();
					//myCtor.getClass().getConstructor(parameterTypes);
					//Thread t = new Thread((Runnable) myCtor.newInstance(processArgs));
				} catch (ClassNotFoundException e) {
					System.out.println("You have inputted an invalid process. Try again");
					e.printStackTrace();
				} catch (SecurityException e) {
					System.out.println("You don't have access to the constructor of this class");
					e.printStackTrace();
				} catch (NoSuchMethodException e) {
					System.out.println("This process does not have a constructor");
					e.printStackTrace();
				}
			} else {
				System.out.println("Unsupported input");
				System.out.println("Master: ps, quit, and can start new processes");
				System.out.println("Slave: ps, quit");
			}
		}
	}
}